{
	"name": "AirPollutionDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AirPollutionSink",
						"type": "DatasetReference"
					},
					"name": "AirPollutionSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SilverAirPollutionSink",
						"type": "DatasetReference"
					},
					"name": "SilverAirPollutionSink"
				}
			],
			"transformations": [
				{
					"name": "flattenAirPollution"
				},
				{
					"name": "derivedColumn1AirPollution"
				},
				{
					"name": "filterAirPollution"
				},
				{
					"name": "derivedColumn2AirPollution"
				},
				{
					"name": "selectAirPollution"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coord as (lon as double, lat as double),",
				"          list as (main as (aqi as integer), components as (co as double, no as integer, no2 as double, o3 as double, so2 as double, pm2_5 as double, pm10 as double, nh3 as double), dt as integer)[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['Bronze/History/AirPollution/*.json']) ~> AirPollutionSource",
				"AirPollutionSource foldDown(unroll(),",
				"     mapColumn(",
				"          lon = coord.lon,",
				"          lat = coord.lat,",
				"          timestamp = list.dt,",
				"          aqi = list.main.aqi,",
				"          co = list.components.co,",
				"          no = list.components.no,",
				"          no2 = list.components.no2,",
				"          o3 = list.components.o3,",
				"          so2 = list.components.so2,",
				"          pm2_5 = list.components.pm2_5,",
				"          pm10 = list.components.pm10,",
				"          nh3 = list.components.nh3",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenAirPollution",
				"flattenAirPollution derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), timestamp),",
				"          location = 'Boston') ~> derivedColumn1AirPollution",
				"derivedColumn1AirPollution filter(!isNull(aqi) && !isNull(timestamp)) ~> filterAirPollution",
				"filterAirPollution derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000),",
				"          id = concat(location, '_', toString(corrected_timestamp)),",
				"          co = round(co,2),",
				"          no = round(no,2),",
				"          no2 = round(no2,2),",
				"          o3 = round(o3,2),",
				"          so2 = round(so2,2),",
				"          pm2_5 = round(pm2_5,2),",
				"          pm10 = round(pm10,2),",
				"          nh3 = round(nh3,2)) ~> derivedColumn2AirPollution",
				"derivedColumn2AirPollution select(mapColumn(",
				"          lon,",
				"          lat,",
				"          aqi,",
				"          co,",
				"          no,",
				"          no2,",
				"          o3,",
				"          so2,",
				"          pm2_5,",
				"          pm10,",
				"          nh3,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectAirPollution",
				"selectAirPollution sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['concat(\"Preprocess_Silver_AirPollution_\", toString(currentUTC(),\\'yyyyMMdd_HHmm\\',\\'America/New_York\\'),\\'.parquet\\')'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SilverAirPollutionSink"
			]
		}
	}
}